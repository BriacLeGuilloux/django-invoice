version: '3'  # Spécifie la version de la syntaxe docker-compose

services:
  web:
    restart: always  # Redémarre automatiquement le service en cas de panne
    build: .  # Construit l'image Docker à partir du Dockerfile dans le répertoire courant
    command: "sh run.sh"  # Commande à exécuter pour démarrer le service (ici, un script shell)
    ports:
      - "8000:8000"  # Expose le port 8000 du conteneur sur le port 8000 de l'hôte
    volumes:
      - .:/invoice  # Monte le répertoire courant (.) dans le conteneur à /sms
    env_file:
      - ".env"  # Charge les variables d'environnement depuis le fichier .env
    depends_on:
      - db  # Ce service dépend du service 'db', il ne démarrera qu'une fois que 'db' sera prêt
      - redis  # Ce service dépend également de 'redis'

  db:
    image: postgres  # Utilise l'image officielle de PostgreSQL
    volumes:
      - ./data/db:/var/lib/postgresql/data  # Monte un volume local pour stocker les données de la base
    environment:  # Définit les variables d'environnement pour la configuration de PostgreSQL
      POSTGRES_DB: postgres  # Nom de la base de données par défaut
      POSTGRES_USER: postgres  # Nom de l'utilisateur de la base de données
      POSTGRES_PASSWORD: postgres  # Mot de passe de l'utilisateur
    ports:
      - "5432:5432"  # Expose le port 5432 du conteneur sur le port 5433 de l'hôte (5432 est le port PostgreSQL par défaut)
    healthcheck:  # Vérifie la santé du service 'db'
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Vérifie si PostgreSQL est prêt à accepter des connexions
      interval: 10s  # Intervalle entre chaque vérification (toutes les 10 secondes)
      retries: 5  # Nombre de tentatives avant de considérer que le service est défaillant

  redis:
    restart: always
    image: "redis:6.2.2-alpine" # Utilise l'image Redis version 6.2.2 avec Alpine Linux
    command: redis-server /usr/local/etc/redis/redis.conf # Utilise un fichier de configuration personnalisé pour Redis
    ports:
      - "6379:6379"
    volumes:
      - $PWD/redis-data:/var/lib/redis # Monte un volume local pour stocker les données de Redis
      - $PWD/redis_.conf:/user/local/etc/redis/redis_.conf # Monte le fichier de configuration redis_.conf dans le conteneur
      - ./redis_.conf:/usr/local/etc/redis/redis.conf  # Monte le fichier de configuration redis.conf dans le conteneur
  celery:
    restart: always  # Redémarre automatiquement le service en cas de panne
    build: .  # Construit l'image Docker à partir du Dockerfile dans le répertoire courant
    command: celery -A django_invoice worker -l info -B --scheduler django_celery_beat.schedulers:DatabaseScheduler  # Commande pour démarrer le worker Celery avec la planification des tâches
    volumes:
      - .:/invoice  # Monte le répertoire courant (.) dans le conteneur à /invoice
    env_file:
      - ".env"  # Charge les variables d'environnement depuis le fichier .env
    depends_on:
      - redis  # Ce service dépend du service 'redis', il ne démarrera qu'une fois que 'redis' sera prêt
      - db  # Ce service dépend également de 'db'
